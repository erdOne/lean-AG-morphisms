import algebraic_geometry.limits 
import algebraic_geometry.misc
import category_theory.limits.preserves.opposites

universes u v

open category_theory category_theory.limits topological_space

namespace algebraic_geometry

variables {J : Type u} [decidable_eq J] (X : J ‚Üí Scheme.{u})

lemma comp_eq_of_is_initial {C : Type*} [category C] [has_strict_initial_objects C] 
  {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (h : X ‚ü∂ Z) (hY : is_initial Y) : f ‚â´ g = h :=
by { haveI := hY.is_iso_to f, rw ‚Üê is_iso.eq_inv_comp, exact hY.hom_ext _ _ }

@[simps]
noncomputable
def coproduct_glue_data : Scheme.glue_data :=
{ J := J,
  U := X,
  V := Œª ij, if ij.1 = ij.2 then X ij.1 else ‚àÖ,
  f := Œª i j, if h : i = j then eq_to_hom (if_pos h) else eq_to_hom (if_neg h) ‚â´ (X i).empty_to,
  f_mono := Œª i j, by split_ifs; apply_instance,
  f_id := Œª i, by { rw dif_pos rfl, apply_instance },
  t := Œª i j, eq_to_hom (by { dsimp only, simp_rw @eq_comm _ i j, split_ifs, subst h, refl }),
  t_id := Œª i, eq_to_hom_refl _ _,
  t' := Œª i j k, if h‚ÇÅ : i = j then if h‚ÇÇ : j = k then eq_to_hom (by substs h‚ÇÅ h‚ÇÇ)
      else pullback.snd ‚â´ eq_to_hom (by { subst h‚ÇÅ, exact dif_neg h‚ÇÇ }) ‚â´ Scheme.empty_to _
      else pullback.fst ‚â´ eq_to_hom (dif_neg h‚ÇÅ) ‚â´ Scheme.empty_to _,
  t_fac := begin
    intros i j k,
    dsimp only,
    split_ifs with h‚ÇÅ,
    { subst h‚ÇÅ, rw [eq_to_hom_refl, category.comp_id],
      by_cases h‚ÇÇ : i = k,
      { subst h‚ÇÇ, simp only [dif_pos rfl, eq_to_hom_refl, category.id_comp],
        rw ‚Üê cancel_mono (eq_to_hom (show ite (i = i) (X i) ‚àÖ = X i, from dif_pos rfl)),
        convert pullback.condition.symm; rw dif_pos rfl; refl },
      { simp only [dif_neg h‚ÇÇ],
        rw [‚Üê category.assoc, category.assoc],
        exact comp_eq_of_is_initial _ _ _ is_initial_of_is_empty } },
    { rw [‚Üê category.assoc, category.assoc],
      exact comp_eq_of_is_initial _ _ _ is_initial_of_is_empty }
  end,
  cocycle := begin
    intros i j k,
    dsimp only,
    split_ifs with h‚ÇÅ,
    { subst h‚ÇÅ,
      by_cases h‚ÇÇ : i = k,
      { subst h‚ÇÇ, simp only [dif_pos rfl, eq_to_hom_refl, category.id_comp] },
      { simp only [dif_neg h‚ÇÇ, category.assoc],
        rw ‚Üê category.assoc, exact comp_eq_of_is_initial _ _ _ is_initial_of_is_empty } },
    { simp only [category.assoc],
      rw ‚Üê category.assoc, exact comp_eq_of_is_initial _ _ _ is_initial_of_is_empty }
  end,
  f_open := Œª i j, by { dsimp only at *, split_ifs; apply_instance } }
.

noncomputable
def multicoequalizer_is_coproduct_of_is_initial
  {C : Type*} [category C] (I : multispan_index C) [has_multicoequalizer I]
  (hI : ‚àÄ i, (‚àÉ h : I.fst_from i = I.snd_from i, I.fst i = I.snd i ‚â´ eq_to_hom (by rw h)) ‚à®
    nonempty (is_initial (I.left i))) :
  is_colimit (cofan.mk (multicoequalizer I) (multicoequalizer.œÄ I)) :=
{ desc := Œª s, multicoequalizer.desc I _ (Œª b, s.Œπ.app ‚ü®b‚ü©)
    (by { intro i, rcases hI i with (‚ü®e‚ÇÅ, e‚ÇÇ‚ü©|‚ü®‚ü®h‚ü©‚ü©),
      { rw e‚ÇÇ, generalize_proofs e‚ÇÉ, revert e‚ÇÉ, rw e‚ÇÅ, simp }, { exact h.hom_ext _ _ } }),
  fac' := Œª s ‚ü®j‚ü©, by rw [cofan.mk_Œπ_app, multicoequalizer.œÄ_desc],
  uniq' := Œª s m H, multicoequalizer.hom_ext I m _
    (Œª j, (H ‚ü®j‚ü©).trans (multicoequalizer.œÄ_desc I s.X _ _ j).symm) }

noncomputable
def coproduct_glue_data.is_coproduct :
  is_colimit (cofan.mk (coproduct_glue_data X).glued (coproduct_glue_data X).Œπ) :=
multicoequalizer_is_coproduct_of_is_initial _
begin
  rintro ‚ü®i, j‚ü©, dsimp at *, split_ifs,
  exacts [or.inl ‚ü®h, by simp [dif_pos h.symm]‚ü©, or.inr ‚ü®is_initial_of_is_empty‚ü©]
end

instance : has_coproducts.{u} Scheme :=
Œª Œπ, ‚ü®Œª J, by { classical, exact @@has_colimit_of_iso _ _
  ‚ü®‚ü®‚ü®_, coproduct_glue_data.is_coproduct (J.obj ‚àò discrete.mk)‚ü©‚ü©‚ü© discrete.nat_iso_functor }‚ü©

noncomputable
def coproduct_glue_data.iso_coproduct : 
  (coproduct_glue_data X).glued ‚âÖ sigma_obj X :=
(colimit.iso_colimit_cocone ‚ü®_, coproduct_glue_data.is_coproduct X‚ü©).symm

@[simp, reassoc]
lemma coproduct_glue_data.iso_coproduct_Œπ_inv (i) : 
  sigma.Œπ X i ‚â´ (coproduct_glue_data.iso_coproduct X).inv =
    (coproduct_glue_data X).Œπ i :=
colimit.iso_colimit_cocone_Œπ_hom ‚ü®_, _‚ü© ‚ü®i‚ü©

@[simp, reassoc]
lemma coproduct_glue_data.iso_coproduct_Œπ_hom (i) : 
  (coproduct_glue_data X).Œπ i ‚â´ (coproduct_glue_data.iso_coproduct X).hom =
    sigma.Œπ X i :=
colimit.iso_colimit_cocone_Œπ_inv ‚ü®_, coproduct_glue_data.is_coproduct X‚ü© ‚ü®i‚ü©

instance (i) : is_open_immersion (sigma.Œπ X i) :=
begin
  rw ‚Üê coproduct_glue_data.iso_coproduct_Œπ_hom,
  apply_instance
end

lemma sigma_Œπ_jointly_surjective (x : (‚àê X).carrier) : 
  ‚àÉ i, x ‚àà set.range (sigma.Œπ X i : _).1.base :=
begin
  obtain ‚ü®i, y, e‚ü© := (coproduct_glue_data X).Œπ_jointly_surjective
    ((coproduct_glue_data.iso_coproduct X).inv.1.base x),
  refine ‚ü®i, y, _‚ü©,
  apply (Top.homeo_of_iso $ Scheme.forget_to_Top.map_iso $
    coproduct_glue_data.iso_coproduct X).symm.injective,
  change (sigma.Œπ X i ‚â´ (coproduct_glue_data.iso_coproduct X).inv).1.base y = _,
  rwa coproduct_glue_data.iso_coproduct_Œπ_inv,
end

lemma supr_opens_range_sigma_Œπ : (‚®Ü i, Scheme.hom.opens_range (sigma.Œπ X i)) = ‚ä§ :=
begin
  rw eq_top_iff,
  rintro x -,
  rw [opens.coe_supr, set.mem_Union],
  exact sigma_Œπ_jointly_surjective X x
end

lemma is_open_immersion_of_open_cover {X Y : Scheme} (f : X ‚ü∂ Y) (ùí∞ : X.open_cover)
  [H : ‚àÄ i, is_open_immersion (ùí∞.map i ‚â´ f)] (hf : function.injective f.1.base) :
  is_open_immersion f :=
begin
  have H' := ùí∞.is_open,
  simp_rw is_open_immersion.iff_stalk_iso at H H' ‚ä¢,
  split,
  { refine open_embedding_iff_continuous_injective_open.mpr ‚ü®f.1.base.2, hf, Œª U hU, _‚ü©,
    have : (‚ãÉ i, set.range (ùí∞.map i).1.base) = set.univ,
    { rw [‚Üê opens.coe_top, ‚Üê ùí∞.supr_opens_range,
        opens.coe_supr], refl },
    have : f.1.base '' U = ‚ãÉ i, (ùí∞.map i ‚â´ f).1.base '' ((ùí∞.map i).1.base ‚Åª¬π' U),
    { simp_rw [Scheme.comp_val_base, coe_comp, set.image_comp f.1.base ((ùí∞.map _).1.base),
        set.image_preimage_eq_inter_range, ‚Üê set.image_Union, ‚Üê set.inter_Union, this,
        set.inter_univ] },
    rw this,
    exact is_open_Union (Œª i, (H i).1.is_open_map _ (hU.preimage (ùí∞.map i).1.base.2)) },
  { intro x,
    obtain ‚ü®y, hy‚ü© := ùí∞.covers x,
    have := @@is_iso.comp_is_iso _ ((H $ ùí∞.f x).2 y) (@@is_iso.inv_is_iso _ $ (H' (ùí∞.f x)).2 y),
    erw [PresheafedSpace.stalk_map.comp, category.assoc, @@is_iso.hom_inv_id,
      category.comp_id] at this,
    rwa ‚Üê hy }
end

noncomputable
def is_coproduct_of_is_open_immersion' {Y : Scheme}
  (f : ‚àÄ i, X i ‚ü∂ Y) [H : ‚àÄ i, is_open_immersion (f i)]
  (hf : (‚®Ü i, (f i).opens_range) = ‚ä§)
  (hf' : ‚àÄ i j, i ‚â† j ‚Üí disjoint (set.range (f i).1.base) (set.range (f j).1.base)) :
  is_colimit (cofan.mk Y f) :=
begin
  haveI : is_iso (colimit.cocone_morphism (cofan.mk Y f)),
  { apply_with cocones.cocone_iso_of_hom_iso { instances := ff },
    apply_with is_open_immersion.to_iso { instances := ff },
    { apply is_open_immersion_of_open_cover _
        ((Scheme.open_cover_of_is_iso.{u} (coproduct_glue_data.iso_coproduct X).hom).bind
        (Œª _, (coproduct_glue_data X).open_cover)),
      { intros x y e,
        obtain ‚ü®i, x, rfl‚ü© := sigma_Œπ_jointly_surjective X x,
        obtain ‚ü®j, y, rfl‚ü© := sigma_Œπ_jointly_surjective X y,
        simp_rw [‚Üê Scheme.comp_val_base_apply, colimit.cocone_morphism_hom,
          colimit.Œπ_desc, cofan.mk_Œπ_app] at e,
        by_cases i = j,
        { subst h, rw (PresheafedSpace.is_open_immersion.base_open).inj e },
        { exact (set.disjoint_iff_forall_ne.mp (hf' _ _ h) _ ‚ü®x, rfl‚ü© _ ‚ü®y, rfl‚ü© e).elim } },
      { rintros ‚ü®‚ü®‚ü©, i‚ü©, convert H i, delta Scheme.glue_data.open_cover, simp } },
    { rw Top.epi_iff_surjective,
      intro x,
      have : x ‚àà (‚ä§ : opens Y.carrier) := trivial,
      rw [‚Üê hf, opens.mem_supr] at this,
      obtain ‚ü®i, x, rfl‚ü© := this,
      refine ‚ü®(sigma.Œπ X i : _).1.base x, _‚ü©,
      rw [‚Üê Scheme.comp_val_base_apply, colimit.cocone_morphism_hom, colimit.Œπ_desc,
        cofan.mk_Œπ_app] } },
  refine is_colimit.of_iso_colimit (colimit.is_colimit _)
    (as_iso $ colimit.cocone_morphism _),
end

noncomputable
def is_coproduct_of_is_open_immersion {Œπ : Type u} (X : Œπ ‚Üí Scheme.{v}) {Y : Scheme.{v}}
  (f : ‚àÄ i, X i ‚ü∂ Y) [H : ‚àÄ i, is_open_immersion (f i)]
  (hf : (‚®Ü i, (f i).opens_range) = ‚ä§)
  (hf' : ‚àÄ i j, i ‚â† j ‚Üí disjoint (set.range (f i).1.base) (set.range (f j).1.base)) :
  is_colimit (cofan.mk Y f) :=
begin
  let s := set.range (Œª i, set.range (f i).1.base),
  have : ‚àÄ x : s, x.1 ‚àà s := Œª x, x.2, choose g hg,
  have hg' : function.injective g,
  { intros x y e, ext1, show x.val = y.val, rw [‚Üê hg x, ‚Üê hg y, e] },
  let g' : Œπ ‚Üí s := Œª i, ‚ü®_, i, rfl‚ü©,
  have hg‚ÇÅ : ‚àÄ i, g' (g i) = i := Œª i, subtype.ext (hg i),
  have hg‚ÇÇ : ‚àÄ i, (g' i).1 = ‚àÖ ‚à® g (g' i) = i,
  { simp_rw or_iff_not_imp_right, intros i e, simpa only [hg, g', disjoint_self] using hf' _ _ e },
  let f' : ‚àÄ (i : s), X (g i) ‚ü∂ Y := Œª i, f _,
  let : is_colimit (cofan.mk Y f'),
  { apply is_coproduct_of_is_open_immersion',
    { simp only [‚Üê opens.ext_iff, opens.coe_supr,
        opens.coe_top, Scheme.hom.opens_range_coe, hg,
        set.eq_univ_iff_forall, set.mem_Union] at hf ‚ä¢,
      intro x, obtain ‚ü®i, hi‚ü© := hf x, exact ‚ü®_, ‚ü®‚ü®_, _, rfl‚ü©, rfl‚ü©, hi‚ü© },
    { exact Œª i j e, hf' _ _ (hg'.ne e) } },
  refine ‚ü®Œª c, this.desc ‚ü®_, discrete.nat_trans (Œª i, c.Œπ.app ‚ü®_‚ü©)‚ü©, _, _‚ü©,
  { rintros c ‚ü®i‚ü©,
    cases hg‚ÇÇ i,
    { exact (@@is_initial_of_is_empty (set.range_eq_empty_iff.mp h)).hom_ext _ _ },
    { rw eq_comm at h, 
      have e := this.fac ‚ü®_, discrete.nat_trans (Œª i, c.Œπ.app ‚ü®_‚ü©)‚ü© ‚ü®g' i‚ü©,
      dsimp [cofan.mk_Œπ_app, f', discrete.nat_trans_app] at e ‚ä¢,
      convert e } },
  { refine Œª c m hm, this.uniq ‚ü®_, discrete.nat_trans (Œª i, c.Œπ.app ‚ü®_‚ü©)‚ü© _ (Œª i, _),
    exact hm ‚ü®_‚ü© }
end

open opposite

lemma bijective_local_ring_hom_fst (R S : Type*) [comm_ring R] [comm_ring S]
  (I : ideal R) [hx : I.is_prime] : 
  function.bijective (localization.local_ring_hom
    (I.comap $ ring_hom.fst R S) I (ring_hom.fst R S) rfl) :=
begin
  split,
  { intros a b e,
    obtain ‚ü®‚ü®a‚ÇÅ, a‚ÇÇ‚ü©, ‚ü®‚ü®s‚ÇÅ, s‚ÇÇ‚ü©, hs‚ü©, rfl‚ü© :=
      is_localization.mk'_surjective (I.comap $ ring_hom.fst R S).prime_compl a,
    obtain ‚ü®‚ü®b‚ÇÅ, b‚ÇÇ‚ü©, ‚ü®‚ü®t‚ÇÅ, t‚ÇÇ‚ü©, ht‚ü©, rfl‚ü© :=
      is_localization.mk'_surjective (I.comap $ ring_hom.fst R S).prime_compl b,
    simp only [localization.local_ring_hom_mk', is_localization.eq, subtype.coe_mk,
      ring_hom.coe_fst] at e ‚ä¢,
    obtain ‚ü®‚ü®c, hc‚ü©, e‚ü© := e,
    refine ‚ü®‚ü®(c, 0), hc‚ü©, _‚ü©,
    simpa using e },
  { intro x,
    obtain ‚ü®x, ‚ü®s, hs‚ü©, rfl‚ü© :=
      is_localization.mk'_surjective I.prime_compl x,
    refine ‚ü®is_localization.mk' _ (x, (1 : S))
      ‚ü®(s, (1 : S)), show (s, (1 : S)) ‚àà (I.comap $ ring_hom.fst R S).prime_compl, from hs‚ü©, _‚ü©,
    simp only [localization.local_ring_hom_mk', subtype.coe_mk, ring_hom.coe_fst] }
end

lemma bijective_local_ring_hom_snd (R S : Type*) [comm_ring R] [comm_ring S]
  (I : ideal S) [hx : I.is_prime] : 
  function.bijective (localization.local_ring_hom
    (I.comap $ ring_hom.snd R S) I (ring_hom.snd R S) rfl) :=
begin
  split,
  { intros a b e,
    obtain ‚ü®‚ü®a‚ÇÅ, a‚ÇÇ‚ü©, ‚ü®‚ü®s‚ÇÅ, s‚ÇÇ‚ü©, hs‚ü©, rfl‚ü© :=
      is_localization.mk'_surjective (I.comap $ ring_hom.snd R S).prime_compl a,
    obtain ‚ü®‚ü®b‚ÇÅ, b‚ÇÇ‚ü©, ‚ü®‚ü®t‚ÇÅ, t‚ÇÇ‚ü©, ht‚ü©, rfl‚ü© :=
      is_localization.mk'_surjective (I.comap $ ring_hom.snd R S).prime_compl b,
    simp only [localization.local_ring_hom_mk', is_localization.eq, subtype.coe_mk,
      ring_hom.coe_snd] at e ‚ä¢,
    obtain ‚ü®‚ü®c, hc‚ü©, e‚ü© := e,
    refine ‚ü®‚ü®(0, c), hc‚ü©, _‚ü©,
    simpa using e },
  { intro x,
    obtain ‚ü®x, ‚ü®s, hs‚ü©, rfl‚ü© :=
      is_localization.mk'_surjective I.prime_compl x,
    refine ‚ü®is_localization.mk' _ ((1 : R), x)
      ‚ü®((1 : R), s), show ((1 : R), s) ‚àà (I.comap $ ring_hom.snd R S).prime_compl, from hs‚ü©, _‚ü©,
    simp only [localization.local_ring_hom_mk', subtype.coe_mk, ring_hom.coe_snd] }
end

lemma prime_spectrum.range_comap_fst (R S : Type*) [comm_ring R] [comm_ring S] : 
  set.range (prime_spectrum.comap (ring_hom.fst R S)) =
    ‚Üë(prime_spectrum.basic_open ((1, 0) : R √ó S)) :=
begin
  ext x,
  simp only [set.mem_range, prime_spectrum.basic_open_eq_zero_locus_compl,
    set_like.mem_coe, set.mem_compl_iff, prime_spectrum.mem_zero_locus,
    set.singleton_subset_iff],
  split,
  { rintro ‚ü®y, rfl‚ü©, simpa [‚Üê ideal.eq_top_iff_one] using y.2.ne_top },
  { rcases (ideal.ideal_prod_prime x.as_ideal).mp x.2 with (‚ü®p, hp, e‚ü©|‚ü®p, hp, e‚ü©),
    { intro _, refine ‚ü®‚ü®p, hp‚ü©, prime_spectrum.ext.mpr (e.trans _).symm‚ü©, ext ‚ü®a, b‚ü©, simp },
    { rw e, intro h, exact (h ‚ü®trivial, zero_mem _‚ü©).elim } }
end

lemma prime_spectrum.range_comap_snd (R S : Type*) [comm_ring R] [comm_ring S] : 
  set.range (prime_spectrum.comap (ring_hom.snd R S)) =
    ‚Üë(prime_spectrum.basic_open ((0, 1) : R √ó S)) :=
begin
  ext x,
  simp only [set.mem_range, prime_spectrum.basic_open_eq_zero_locus_compl,
    set_like.mem_coe, set.mem_compl_iff, prime_spectrum.mem_zero_locus,
    set.singleton_subset_iff],
  split,
  { rintro ‚ü®y, rfl‚ü©, simpa [‚Üê ideal.eq_top_iff_one] using y.2.ne_top },
  { rcases (ideal.ideal_prod_prime x.as_ideal).mp x.2 with (‚ü®p, hp, e‚ü©|‚ü®p, hp, e‚ü©),
    { rw e, intro h, exact (h ‚ü®zero_mem _, trivial‚ü©).elim },
    { intro _, refine ‚ü®‚ü®p, hp‚ü©, prime_spectrum.ext.mpr (e.trans _).symm‚ü©, ext ‚ü®a, b‚ü©, simp } }
end

@[instance]
lemma is_open_immersion_Spec_prod_fst {R S : Type u} [comm_ring R] [comm_ring S] : 
  is_open_immersion (Scheme.Spec.map (CommRing.of_hom $ ring_hom.fst R S).op) :=
begin
  apply_with is_open_immersion.of_stalk_iso { instances := ff },
  { refine ‚ü®(prime_spectrum.closed_embedding_comap_of_surjective _
      (ring_hom.fst R S) prod.fst_surjective).1, _‚ü©,
    erw prime_spectrum.range_comap_fst,
    exact prime_spectrum.is_open_basic_open },
  { rintro (x : prime_spectrum R),
    erw ‚Üê local_ring_hom_comp_stalk_iso,
    apply_with is_iso.comp_is_iso { instances := ff }, { apply_instance },
    apply_with is_iso.comp_is_iso { instances := ff }, swap, { apply_instance },
    rw CommRing.is_iso_iff_bijective,
    convert bijective_local_ring_hom_fst R S x.as_ideal, }
end

@[instance]
lemma is_open_immersion_Spec_prod_snd {R S : Type u} [comm_ring R] [comm_ring S] : 
  is_open_immersion (Scheme.Spec.map (CommRing.of_hom $ ring_hom.snd R S).op) :=
begin
  apply_with is_open_immersion.of_stalk_iso { instances := ff },
  { refine ‚ü®(prime_spectrum.closed_embedding_comap_of_surjective _
      (ring_hom.snd R S) prod.snd_surjective).1, _‚ü©,
    erw prime_spectrum.range_comap_snd,
    exact prime_spectrum.is_open_basic_open },
  { rintro (x : prime_spectrum S),
    erw ‚Üê local_ring_hom_comp_stalk_iso,
    apply_with is_iso.comp_is_iso { instances := ff }, { apply_instance },
    apply_with is_iso.comp_is_iso { instances := ff }, swap, { apply_instance },
    rw CommRing.is_iso_iff_bijective,
    convert bijective_local_ring_hom_snd R S x.as_ideal, }
end

def binary_cofan_iso_cofan {C : Type*} [category C] {X Y Z : C} 
  (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : 
  binary_cofan.mk f g ‚âÖ cofan.mk Z (Œª b, walking_pair.cases_on b f g) :=
{ hom := { hom := ùüô Z, w' := (by rintro ‚ü®_|_‚ü©; dsimp; simp) },
  inv := { hom := ùüô Z, w' := (by rintro ‚ü®_|_‚ü©; dsimp; simp) },
  hom_inv_id' := by { ext1, dsimp, simp },
  inv_hom_id' := by { ext1, dsimp, simp } }
.

noncomputable
def is_coprod_of_is_open_immersion_of_is_compl {X Y Z : Scheme} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z)
  [is_open_immersion f] [is_open_immersion g]
    (h : is_compl (set.range f.1.base) (set.range g.1.base)) : 
  is_colimit (binary_cofan.mk f g) :=
begin
  refine is_colimit.of_iso_colimit _ (binary_cofan_iso_cofan _ _).symm,
  fapply is_coproduct_of_is_open_immersion _ _,
  swap 3, { rintros (_|_); dsimp only; apply_instance },
  { ext1, convert h.2.eq_top using 1, rw opens.coe_supr, 
    refine (supr_le _).antisymm (sup_le (le_trans _ $ le_supr _ walking_pair.left)
      (le_trans _ $ le_supr _ walking_pair.right)),
    { rintro (_|_); dsimp only, exacts [le_sup_left, le_sup_right] },
    exacts [le_rfl, le_rfl] },
  { rintro (_|_) (_|_) e; dsimp only, any_goals { exact (e rfl).elim }, exacts [h.1, h.1.symm] }
end

-- set_option trace.class_instances true

noncomputable
def is_coprod_Spec_prod (R S : CommRing.{u}) : 
  is_colimit (binary_cofan.mk
    (Scheme.Spec.map (CommRing.of_hom $ ring_hom.fst R S).op)
    (Scheme.Spec.map (CommRing.of_hom $ ring_hom.snd R S).op)) :=
begin
  apply is_coprod_of_is_open_immersion_of_is_compl _ _,
  rotate,
  { exact is_open_immersion_Spec_prod_fst },
  { exact is_open_immersion_Spec_prod_snd },
  { erw [prime_spectrum.range_comap_fst, prime_spectrum.range_comap_snd],
    split,
    { rw [disjoint_iff, set.inf_eq_inter, ‚Üê opens.coe_inf, ‚Üê prime_spectrum.basic_open_mul,
        prod.mk_mul_mk, mul_zero, zero_mul, ‚Üê prod.zero_eq_mk, prime_spectrum.basic_open_zero,
        set.bot_eq_empty, opens.coe_bot] },
    { have : (1, 0) + (0, 1) = (1 : R √ó S) := by simp,
      rw [codisjoint_iff, set.sup_eq_union,
        prime_spectrum.basic_open_eq_zero_locus_compl,
        prime_spectrum.basic_open_eq_zero_locus_compl, ‚Üê set.compl_inter,
        ‚Üê prime_spectrum.zero_locus_union, set.top_eq_univ, compl_eq_comm, set.compl_univ,
        eq_comm, ‚Üê prime_spectrum.zero_locus_span, prime_spectrum.zero_locus_empty_iff_eq_top,
        ideal.eq_top_iff_one, ‚Üê this],
      refine add_mem (ideal.subset_span _) (ideal.subset_span _),
      exacts [or.inl rfl, or.inr rfl] } }
end

noncomputable
instance Scheme.Spec.preserves_binary_products_right_op
  (R S : CommRing) : preserves_limit (pair R S) Scheme.Spec.{u}.right_op :=
begin
  refine preserves_limit_of_preserves_limit_cone (CommRing.prod_fan_is_limit R S) _,
  refine ((is_limit.postcompose_hom_equiv _ _).symm (is_limit_cone_right_op_of_cocone _ 
    ((is_coprod_Spec_prod R S).whisker_equivalence (discrete.opposite _)))).of_iso_limit _,
  { apply discrete.nat_iso, rintro ‚ü®_|_‚ü©; exact iso.refl _ },
  { refine as_iso { hom := (ùüô _), w' := _ },
    { rintro ‚ü®_|_‚ü©; dsimp; rw [category.id_comp, category.comp_id]; refl },
    { exact cones.cone_iso_of_hom_iso _ } }
end
.
noncomputable
instance Scheme.Spec.preserves_binary_coproducts :
  preserves_colimits_of_shape (discrete walking_pair) Scheme.Spec.{u} :=
begin
  apply preserves_colimits_of_shape_of_nat_iso Scheme.Spec.right_op_left_op_iso,
  apply_with preserves_colimits_of_shape_left_op { instances := ff },
  apply preserves_limits_of_shape_of_equiv (discrete.opposite _).symm _,
  constructor,
  intros K,
  apply preserves_limit_of_iso_diagram _ (diagram_iso_pair K).symm,
  exact Scheme.Spec.preserves_binary_products_right_op _ _
end

noncomputable
instance Scheme.Spec.preserves_initial :
  preserves_colimits_of_shape (discrete pempty) Scheme.Spec :=
begin
  apply preserves_colimits_of_shape_pempty_of_preserves_initial _,
  refine preserves_initial_of_iso _ (_ ‚â™‚â´ Scheme.Spec.map_iso
    (colimit.iso_colimit_cocone ‚ü®_, (initial_op_of_terminal CommRing.punit_is_terminal)‚ü©).symm),
  refine (as_iso $ empty_is_initial.to _).symm ‚â™‚â´ _,
  exact (as_iso (empty_is_initial.to (Scheme.Spec.obj (op $ CommRing.of punit))) : _)
end

noncomputable
instance {J : Type} [fintype J] : preserves_colimits_of_shape (discrete J) Scheme.Spec.{u} :=
preserves_finite_coproducts_of_preserves_binary_and_initial _ _

instance : has_finite_coproducts Scheme.{u} :=
has_finite_coproducts_of_has_coproducts.{u u} _

instance {X Y : Scheme.{u}} [is_affine X] [is_affine Y] : is_affine (X ‚®ø Y) := 
is_affine_of_iso
  (coprod.map_iso X.iso_Spec Y.iso_Spec ‚â™‚â´ preserves_colimit_pair.iso Scheme.Spec _ _).hom



end algebraic_geometry