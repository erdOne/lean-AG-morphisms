import algebraic_geometry.prime_spectrum.basic
import for_mathlib.residue_field
import dimension_theory.artinian

open_locale filter topological_space

open ideal (is_jacobson)

variables {K A : Type*} [field K] [comm_ring A] [algebra K A] [algebra.finite_type K A] 

lemma prime_spectrum.zero_locus_eq_iff {I J : ideal A} :
  prime_spectrum.zero_locus (I : set A) = prime_spectrum.zero_locus J ‚Üî I.radical = J.radical :=
begin
  split,
  { intro h, simp_rw [‚Üê prime_spectrum.vanishing_ideal_zero_locus_eq_radical, h] },
  { intro h, rw [‚Üê prime_spectrum.zero_locus_radical, h, prime_spectrum.zero_locus_radical] }
end

variable (K)

lemma ideal.exists_pow_le_of_fg {R : Type*} [comm_semiring R] (I J : ideal R) (h : I.fg)
  (h' : I ‚â§ J.radical) :
  ‚àÉ n : ‚Ñï, I ^ n ‚â§ J :=
begin
  revert h',
  refine submodule.fg_induction _ _ (Œª I, I ‚â§ J.radical ‚Üí ‚àÉ n : ‚Ñï, I ^ n ‚â§ J) _ _ _ h,
  { intros x hx, obtain ‚ü®n, hn‚ü© := hx (ideal.subset_span (set.mem_singleton x)),
    exact ‚ü®n, by rwa [‚Üê ideal.span, ideal.span_singleton_pow, ideal.span_le, set.singleton_subset_iff]‚ü© },
  { intros J K hJ hK hJK,
    obtain ‚ü®n, hn‚ü© := hJ (Œª x hx, hJK $ ideal.mem_sup_left hx),
    obtain ‚ü®m, hm‚ü© := hK (Œª x hx, hJK $ ideal.mem_sup_right hx),
    use n + m,
    rw [‚Üê ideal.add_eq_sup, add_pow, ideal.sum_eq_sup, finset.sup_le_iff],
    refine Œª i hi, ideal.mul_le_right.trans _,
    obtain h | h := le_or_lt n i,
    { exact ideal.mul_le_right.trans ((ideal.pow_le_pow h).trans hn) },
    { refine ideal.mul_le_left.trans ((ideal.pow_le_pow _).trans hm),
      rw [add_comm, nat.add_sub_assoc h.le], apply nat.le_add_right } },
end

lemma ideal.exists_ne_zero_pow_le_of_fg {R : Type*} [comm_semiring R] (I J : ideal R) (h : I.fg)
  (h' : I ‚â§ J.radical) :
  ‚àÉ n ‚â† 0, I ^ n ‚â§ J :=
begin
  obtain ‚ü®n, hn‚ü© := ideal.exists_pow_le_of_fg I J h h',
  exact ‚ü®n + 1, n.succ_ne_zero, (ideal.pow_le_pow n.le_succ).trans hn‚ü©,
end

lemma prime_spectrum.exists_closed_point_of_is_jacobson [is_jacobson A] 
  (s : set $ prime_spectrum A) (hs : is_open s) (hs' : s.nonempty) :
  ‚àÉ x ‚àà s, is_closed ({x} : set $ prime_spectrum A) :=
begin
  simp_rw prime_spectrum.is_closed_singleton_iff_is_maximal,
  obtain ‚ü®I, hI, hI'‚ü© :=
    (prime_spectrum.is_closed_iff_zero_locus_radical_ideal _).mp hs.is_closed_compl,
  simp_rw [‚Üê @set.not_mem_compl_iff _ s, hI', prime_spectrum.mem_zero_locus],
  have := hs'.ne_empty, contrapose! this, simp_rw [not_imp_not] at this,
  rw [‚Üê set.compl_univ, eq_compl_comm, hI', eq_comm, ‚Üê prime_spectrum.zero_locus_bot,
    prime_spectrum.zero_locus_eq_iff, ideal.radical_eq_jacobson, ideal.radical_eq_jacobson],
  refine le_antisymm (le_Inf _) (ideal.jacobson_mono bot_le),
  rintro x ‚ü®-, hx‚ü©,
  exact Inf_le ‚ü®this ‚ü®x, hx.is_prime‚ü© hx, hx‚ü©,
end

lemma prime_spectrum.is_compact_open_iff {s : set $ prime_spectrum A} :
  is_compact s ‚àß is_open s ‚Üî 
  ‚àÉ I : ideal A, I.fg ‚àß (prime_spectrum.zero_locus (I : set A))·∂ú = s :=
begin
  rw topological_space.opens.is_compact_open_iff_eq_finite_Union_of_is_basis _
    prime_spectrum.is_basis_basic_opens prime_spectrum.is_compact_basic_open,
  simp_rw [prime_spectrum.basic_open_eq_zero_locus_compl, ‚Üê set.compl_Inter‚ÇÇ,
    ‚Üê prime_spectrum.zero_locus_Union, set.bUnion_of_singleton, @eq_comm _ s],
  split,
  { rintro ‚ü®s, hs, rfl‚ü©, 
    exact ‚ü®ideal.span s, ‚ü®hs.to_finset, by rw set.finite.coe_to_finset‚ü©,
      by rw prime_spectrum.zero_locus_span‚ü© },
  { rintro ‚ü®_, ‚ü®s, rfl‚ü©, rfl‚ü©,
    exact ‚ü®s, s.finite_to_set, by rw [prime_spectrum.zero_locus_span]‚ü© }
end

lemma prime_spectrum.exists_idempotent_basic_open_eq_of_is_clopen {s : set $ prime_spectrum A}
  (hs : is_clopen s) : 
  ‚àÉ e : A, is_idempotent_elem e ‚àß s = prime_spectrum.basic_open e :=
begin
  obtain ‚ü®I, hI, hI'‚ü© := prime_spectrum.is_compact_open_iff.mp
    ‚ü®is_compact_of_is_closed_subset is_compact_univ hs.2 s.subset_univ, hs.1‚ü©,
  obtain ‚ü®J, hJ, hJ'‚ü© := prime_spectrum.is_compact_open_iff.mp ‚ü®is_compact_of_is_closed_subset
    is_compact_univ hs.1.is_closed_compl $ set.subset_univ _, hs.2.is_open_compl‚ü©,
  simp only [compl_eq_iff_is_compl, ‚Üê eq_compl_iff_is_compl, compl_compl] at hI' hJ',
  have : I * J ‚â§ ideal.radical (‚ä• : ideal A),
  { refine ideal.radical_le_radical_iff.mp (eq.le _),
    rw [‚Üê prime_spectrum.zero_locus_eq_iff, prime_spectrum.zero_locus_bot,
      prime_spectrum.zero_locus_mul, hI', hJ', set.compl_union_self] },
  obtain ‚ü®n, hn, hn'‚ü© := ideal.exists_ne_zero_pow_le_of_fg _ _ (submodule.fg.mul hI hJ) this,
  rw mul_pow at hn',
  have : I ^ n ‚äî J ^ n = ‚ä§,
  { rw [eq_top_iff, ‚Üê ideal.span_pow_eq_top (I ‚à™ J : set A) _ n, ideal.span_le, set.image_union,
      set.union_subset_iff],
    split,
    { rintro _ ‚ü®x, hx, rfl‚ü©, exact ideal.mem_sup_left (ideal.pow_mem_pow hx n) },
    { rintro _ ‚ü®x, hx, rfl‚ü©, exact ideal.mem_sup_right (ideal.pow_mem_pow hx n) },
    { rw [ideal.span_union, ideal.span_eq, ideal.span_eq,
        ‚Üê prime_spectrum.zero_locus_empty_iff_eq_top, prime_spectrum.zero_locus_sup, hI', hJ',
        set.compl_inter_self] } },
  rw [ideal.eq_top_iff_one, submodule.mem_sup] at this,
  obtain ‚ü®x, hx, y, hy, e‚ü© := this,
  refine ‚ü®x, _, subset_antisymm _ _‚ü©,
  { have : x * y = 0 := hn' (ideal.mul_mem_mul hx hy),
    rw ‚Üê eq_sub_iff_add_eq' at e, rwa [e, mul_sub, sub_eq_zero, eq_comm, mul_one] at this },
  { rw [prime_spectrum.basic_open_eq_zero_locus_compl, set.subset_compl_iff_disjoint_left,
      set.disjoint_iff_inter_eq_empty, ‚Üê hJ', ‚Üê prime_spectrum.zero_locus_span,
      ‚Üê prime_spectrum.zero_locus_sup, prime_spectrum.zero_locus_empty_iff_eq_top,
      ideal.eq_top_iff_one, ‚Üê e],
    exact submodule.add_mem_sup (ideal.subset_span $ set.mem_singleton _)
      (ideal.pow_le_self hn hy) },
  { rw [prime_spectrum.basic_open_eq_zero_locus_compl, set.compl_subset_comm, ‚Üê hI'],
    exact prime_spectrum.zero_locus_anti_mono
      (set.singleton_subset_iff.mpr $ ideal.pow_le_self hn hx) }
end

lemma prime_spectrum.basic_open_eq_zero_locus_of_is_idempotent_elem
  (e : A) (he : is_idempotent_elem e) : ‚Üë(prime_spectrum.basic_open e) =
    prime_spectrum.zero_locus ({1 - e} : set A) :=
begin
  ext p,
  suffices : e ‚àâ p.as_ideal ‚Üî 1 - e ‚àà p.as_ideal, { simpa },
  split,
  { intro h,
    refine (p.2.mem_or_mem_of_mul_eq_zero _).resolve_left h,
    rw [mul_sub, mul_one, he.eq, sub_self] },
  { intros h‚ÇÅ h‚ÇÇ, apply p.2.1,
    rw [ideal.eq_top_iff_one, ‚Üê sub_add_cancel 1 e], exact add_mem h‚ÇÅ h‚ÇÇ }
end

lemma prime_spectrum.zero_locus_eq_basic_open_of_is_idempotent_elem
  (e : A) (he : is_idempotent_elem e) :
    prime_spectrum.zero_locus ({e} : set A) = prime_spectrum.basic_open (1 - e) :=
by rw [prime_spectrum.basic_open_eq_zero_locus_of_is_idempotent_elem _ he.one_sub, sub_sub_cancel]

lemma prime_spectrum.is_clopen_iff {s : set (prime_spectrum A)} :
  is_clopen s ‚Üî ‚àÉ e : A, is_idempotent_elem e ‚àß s = prime_spectrum.basic_open e :=
begin
  refine ‚ü®prime_spectrum.exists_idempotent_basic_open_eq_of_is_clopen, _‚ü©,
  rintro ‚ü®e, he, rfl‚ü©,
  refine ‚ü®(prime_spectrum.basic_open e).prop, _‚ü©,
  rw [prime_spectrum.basic_open_eq_zero_locus_of_is_idempotent_elem e he],
  exact prime_spectrum.is_closed_zero_locus _
end

lemma is_isolated_point_iff {Œ± : Type*} [topological_space Œ±] {x : Œ±} : 
  ùìù[‚â†] x = ‚ä• ‚Üî is_open ({x} : set Œ±) :=
by rw [‚Üê is_closed_compl_iff, ‚Üê closure_subset_iff_is_closed, set.subset_compl_singleton_iff,
    mem_closure_iff_nhds_within_ne_bot, filter.not_ne_bot]

lemma is_localization.of_le_of_is_unit {R : Type*} 
  [comm_ring R] (A : Type*) [comm_ring A] [algebra R A] (M N : submonoid R) [is_localization M A]
  (h : M ‚â§ N) (h' : ‚àÄ x ‚àà N, is_unit (algebra_map R A x)) : is_localization N A :=
begin
  refine ‚ü®Œª x, h' _ x.2, Œª x, _, _‚ü©,
  { obtain ‚ü®‚ü®r, ‚ü®m, hm‚ü©‚ü©, e‚ü© := is_localization.surj M x,
    exact ‚ü®‚ü®r, ‚ü®m, h hm‚ü©‚ü©, e‚ü© },
  { intros x y,
    split,
    { rw is_localization.eq_iff_exists M, rintros ‚ü®‚ü®c, hc‚ü©, e‚ü©, exact ‚ü®‚ü®c, h hc‚ü©, e‚ü© },
    { rintros ‚ü®‚ü®c, hc‚ü©, e‚ü©,
      apply_fun algebra_map R A at e,
      simpa only [map_mul, subtype.coe_mk, is_unit.mul_left_inj (h' _ hc)] using e } }
end

def minimal_primes.to_prime_spectrum : minimal_primes A ‚Ü™ prime_spectrum A :=
‚ü®Œª x, ‚ü®x.1, x.2.1.1‚ü©, by tidy‚ü© 

lemma minimal_primes.is_min_to_prime_spectrum (x : minimal_primes A) :
  is_min (minimal_primes.to_prime_spectrum x) :=
Œª y h, x.2.2 ‚ü®y.2, bot_le‚ü© h

lemma minimal_primes.range_to_prime_spectrum :
  set.range (@minimal_primes.to_prime_spectrum A _) = set_of is_min :=
begin
  apply subset_antisymm,
  { rintro _ ‚ü®x, rfl‚ü©, exact minimal_primes.is_min_to_prime_spectrum _ },
  { exact Œª x hx, ‚ü®‚ü®x.as_ideal, ‚ü®x.2, bot_le‚ü©,
      Œª y hy hy', @hx ‚ü®y, hy.1‚ü© hy'‚ü©, subtype.coe_injective rfl‚ü© },
end

lemma prime_spectrum.is_max_iff {x : prime_spectrum A} : 
  is_max x ‚Üî x.as_ideal.is_maximal :=
begin
  split,
  { intro hx,
    refine ‚ü®‚ü®x.2.ne_top, Œª I hI, _‚ü©‚ü©,
    by_contra e,
    obtain ‚ü®m, hm, hm'‚ü© := ideal.exists_le_maximal I e, 
    exact hx.not_lt (show x < ‚ü®m, hm.is_prime‚ü©, from hI.trans_le hm') },
  { intros hx y e, rw subtype.coe_injective (hx.eq_of_le y.2.ne_top e), exact le_rfl }
end

variable (K)

-- move me
lemma ideal.residue_field_bijective_of_maximal (I : ideal A) [I.is_maximal] :
  function.bijective (algebra_map (A ‚ß∏ I) I.residue_field) :=
begin
  letI : field (A ‚ß∏ I) := I^.quotient.field,
  exact (is_localization.at_units (A ‚ß∏ I) (non_zero_divisors _) I.residue_field
    (Œª x, is_unit_iff_ne_zero.mpr (mem_non_zero_divisors_iff_ne_zero.mp x.2))).bijective,
end

lemma ideal.residue_field_surjective_of_maximal (I : ideal A) [I.is_maximal] :
  function.surjective (algebra_map A I.residue_field) :=
begin
  rw is_scalar_tower.algebra_map_eq A (A ‚ß∏ I) I.residue_field,
  exact I^.residue_field_bijective_of_maximal^.surjective^.comp ideal.quotient.mk_surjective
end

lemma prime_spectrum.is_min_iff_stable_under_generalization {x : prime_spectrum A} :
  is_min x ‚Üî stable_under_generalization ({x} : set $ prime_spectrum A) :=
begin
  simp_rw [stable_under_generalization, ‚Üê prime_spectrum.le_iff_specializes],
    exact ‚ü®Œª H x' y h (e : x' = x), le_antisymm (e ‚ñ∏ h) (@H y (e ‚ñ∏ h)), Œª H y h, (H h rfl).ge‚ü©
end

lemma prime_spectrum.is_closed_singleton_tfae_of_finite_type_of_field (x : prime_spectrum A) :
  tfae [x.as_ideal.is_maximal,
    is_closed ({x} : set $ prime_spectrum A),
    stable_under_specialization ({x} : set $ prime_spectrum A),
    module.finite K x.as_ideal.residue_field,
    algebra.is_algebraic K x.as_ideal.residue_field] :=
begin
  tfae_have : 1 ‚Üî 2,
  { rw prime_spectrum.is_closed_singleton_iff_is_maximal },
  tfae_have : 1 ‚Üî 3,
  { simp_rw [‚Üê prime_spectrum.is_max_iff, stable_under_specialization,
      ‚Üê prime_spectrum.le_iff_specializes],
    exact ‚ü®Œª H x' y h (e : x' = x), (@H y (e ‚ñ∏ h)).antisymm (e ‚ñ∏ h), Œª H y h, (H h rfl).le‚ü© },
  tfae_have : 1 ‚Üí 4,
  { introI h,
    haveI : algebra.finite_type K x.as_ideal.residue_field :=
      ‚Äπalgebra.finite_type K A‚Ä∫.trans (algebra.finite_type.of_surjective infer_instance
      (algebra.of_id _ _) x.as_ideal.residue_field_surjective_of_maximal),
    exact finite_of_finite_type_of_is_jacobson_of_field K x.as_ideal.residue_field },
  tfae_have : 4 ‚Üí 5,
  { introI h, exact algebra.is_algebraic_of_finite _ _ },
  tfae_have : 5 ‚Üí 1,
  { introI h,
    refine ideal.quotient.maximal_of_is_field _ _,
    apply (alg_equiv.of_injective
      ((is_scalar_tower.to_alg_hom A (A ‚ß∏ x.as_ideal) x.as_ideal.residue_field).restrict_scalars K)
      (is_fraction_ring.injective (A ‚ß∏ x.as_ideal) x.as_ideal.residue_field)).symm
      .to_ring_equiv.is_field_of_is_field,
    exact subalgebra.is_field_of_algebraic _ h },
  tfae_finish
end

lemma prime_spectrum.is_closed_singleton_iff_finite (x : prime_spectrum A) :
  is_closed ({x} : set $ prime_spectrum A) ‚Üî module.finite K x.as_ideal.residue_field :=
(prime_spectrum.is_closed_singleton_tfae_of_finite_type_of_field K x).out 1 3

open ideal (is_jacobson)

lemma prime_spectrum.is_open_singleton_tfae_of_finite_type_of_is_jacobson [is_jacobson A]
  [is_noetherian_ring A] (x : prime_spectrum A) :
  tfae [is_open ({x} : set $ prime_spectrum A),
    is_clopen ({x} : set $ prime_spectrum A),
    is_closed ({x} : set $ prime_spectrum A) ‚àß is_min x] :=
begin
  tfae_have : 1 ‚Üí 2,
  { intro h, obtain ‚ü®y, rfl : y = x, h'‚ü© := prime_spectrum.exists_closed_point_of_is_jacobson _ h
      ‚ü®x, set.mem_singleton x‚ü©, exact ‚ü®h, h'‚ü© },
  tfae_have : 2 ‚Üí 3,
  { rw prime_spectrum.is_min_iff_stable_under_generalization,
    exact Œª h, ‚ü®h.is_closed, h.is_open.stable_under_generalization‚ü© },
  tfae_have : 3 ‚Üí 1,
  { rintros ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
    rw [prime_spectrum.is_closed_singleton_iff_is_maximal, ‚Üê prime_spectrum.is_max_iff] at h‚ÇÅ,
    suffices : {x} = (‚ãÉ p ‚àà { p : prime_spectrum A | is_min p ‚àß p ‚â† x },
      closure {p} : set (prime_spectrum A))·∂ú,
    { rw [this, is_open_compl_iff],
      refine is_closed_bUnion _ (Œª _ _, is_closed_closure),
      haveI := (@minimal_primes_finite A _ _).to_subtype,
      apply (set.range $ @minimal_primes.to_prime_spectrum A _).to_finite.subset,
      rw minimal_primes.range_to_prime_spectrum,
      exact Œª x hx, hx.1 },
    ext p,
    simp only [set.mem_singleton_iff, set.compl_Union‚ÇÇ, set.mem_Inter‚ÇÇ,
      set.mem_compl_iff, ‚Üê specializes_iff_mem_closure, ‚Üê prime_spectrum.le_iff_specializes],
    split,
    { rintro rfl y hy h, exact hy.2 (h‚ÇÇ.eq_of_le h) },
    { intros hp,
      apply h‚ÇÅ.eq_of_ge,
      obtain ‚ü®q, hq, hq'‚ü© := ideal.exists_minimal_primes_le (@bot_le _ _ _ p.as_ideal),
      have : minimal_primes.to_prime_spectrum ‚ü®q, hq‚ü© = x,
      { by_contra h, exact hp _ ‚ü®minimal_primes.is_min_to_prime_spectrum _, h‚ü© hq' },
      rw ‚Üê this, exact hq' } },
  tfae_finish
end

lemma prime_spectrum.is_open_singleton_iff_is_max_and_is_min [ideal.is_jacobson A] 
  [is_noetherian_ring A]
  (x : prime_spectrum A) :
  is_open ({x} : set $ prime_spectrum A) ‚Üî is_max x ‚àß is_min x :=
begin
  rw [(prime_spectrum.is_open_singleton_tfae_of_finite_type_of_is_jacobson x).out 0 2,
    prime_spectrum.is_closed_singleton_iff_is_maximal, prime_spectrum.is_max_iff],
end

lemma prime_spectrum.is_open_singleton_tfae_of_finite_type_of_field (x : prime_spectrum A) :
  tfae [is_open ({x} : set $ prime_spectrum A),
    is_clopen ({x} : set $ prime_spectrum A),
    module.finite K (localization.at_prime x.as_ideal),
    is_closed ({x} : set $ prime_spectrum A) ‚àß is_min x] :=
begin
  haveI := is_jacobson_of_finite_type K A,
  haveI := algebra.finite_type.is_noetherian_ring K A,
  tfae_have : 1 ‚Üî 2,
  { exact (prime_spectrum.is_open_singleton_tfae_of_finite_type_of_is_jacobson x).out 0 1 },
  tfae_have : 1 ‚Üî 4,
  { exact (prime_spectrum.is_open_singleton_tfae_of_finite_type_of_is_jacobson x).out 0 2 },
  tfae_have : 2 ‚Üí 3,
  { intro h,
    obtain ‚ü®e, he, he'‚ü© := prime_spectrum.exists_idempotent_basic_open_eq_of_is_clopen h,
    have he'' : e ‚àà x.as_ideal.prime_compl,
    { show x ‚àà (prime_spectrum.basic_open e : set (prime_spectrum A)), rw ‚Üê he', exact rfl },
    haveI : is_localization.at_prime (localization.away e) x.as_ideal,
    { apply is_localization.of_le_of_is_unit _ (submonoid.powers e),
      { simpa only [set_like.mem_coe, submonoid.closure_le, set.singleton_subset_iff,
          submonoid.powers_eq_closure] },
      { intro a, dsimp [ideal.prime_compl], contrapose!, intro h,
        obtain ‚ü®I, hI‚ÇÅ, hI‚ÇÇ‚ü© := exists_max_ideal_of_mem_nonunits h,
        suffices : prime_spectrum.comap (algebra_map A (localization.away e)) ‚ü®I, hI‚ÇÅ.is_prime‚ü© = x,
        { rw ‚Üê this, exact hI‚ÇÇ },
        rw [‚Üê set.mem_singleton_iff, he'],
        rintro (H : algebra_map A (localization.away e) e ‚àà I),
        exact hI‚ÇÅ.ne_top (ideal.eq_top_of_is_unit_mem _ H
          (is_localization.map_units _ ‚ü®_, submonoid.mem_powers e‚ü©)) } },
    haveI : algebra.finite_type K (localization.at_prime x.as_ideal),
    { exact ‚Äπalgebra.finite_type K A‚Ä∫.trans ((algebra.finite_type.of_finite_presentation
        $ is_localization.away.finite_presentation e).equiv 
        (is_localization.alg_equiv x.as_ideal.prime_compl (localization.away e)
        (localization.at_prime x.as_ideal))) },
    rw finite_iff_forall_prime_is_maximal_of_field,
    intros I hI,
    suffices : I = local_ring.maximal_ideal _, { rw this, apply_instance },
    refine (is_localization.order_embedding x.as_ideal.prime_compl _).injective _,
    dsimp [is_localization.order_embedding],
    rw localization.at_prime.comap_maximal_ideal,
    suffices : prime_spectrum.comap (algebra_map A (localization.at_prime x.as_ideal)) ‚ü®I, hI‚ü© = x,
    { conv_rhs { rw ‚Üê this }, refl },
    rw [‚Üê set.mem_singleton_iff, he'],
    rintro (H : algebra_map A (localization.at_prime x.as_ideal) e ‚àà I),
    exact hI.ne_top (ideal.eq_top_of_is_unit_mem _ H (is_localization.map_units _ ‚ü®_, he''‚ü©)) },
  tfae_have : 3 ‚Üí 4,
  { introI h,
    rw prime_spectrum.is_closed_singleton_iff_finite K x,
    haveI : is_scalar_tower K (localization.at_prime x.as_ideal) x.as_ideal.residue_field :=
      ideal.residue_field.is_scalar_tower x.as_ideal,
    refine ‚ü®module.finite.of_surjective (is_scalar_tower.to_alg_hom K
      (localization.at_prime x.as_ideal) _).to_linear_map ideal.quotient.mk_surjective, _‚ü©,
    intros y hy, 
    have : is_artinian_ring (localization.at_prime x.as_ideal) := is_artinian_of_tower K
      (((module.finite_length_tfae_of_field K (localization.at_prime x.as_ideal)).out 0 2).mp h),
    replace this := ((is_artinian_ring_iff_is_noetherian_ring _).mp this).2,
    have H : disjoint (x.as_ideal.prime_compl : set A) y.as_ideal,
    { show disjoint (x.as_ideal·∂ú : set A) y.as_ideal, rw disjoint_compl_left_iff, exact hy },
    show x.as_ideal ‚â§ y.as_ideal,
    rw [‚Üê @localization.at_prime.comap_maximal_ideal _ _ x.as_ideal,
      ‚Üê is_localization.comap_map_of_is_prime_disjoint _
        (localization.at_prime x.as_ideal) y.as_ideal y.2 H],
    refine ideal.comap_mono (local_ring.eq_maximal_ideal $ this _ _).ge,
    exact is_localization.is_prime_of_is_prime_disjoint x.as_ideal.prime_compl _ _ y.2 H },
  tfae_finish
end

.

lemma prime_spectrum.is_closed_singleton_iff_finite'
  {K A : Type*} [field K] [comm_ring A] (f : K ‚Üí+* A) (hf : f.finite_type) (x : prime_spectrum A) :
  is_closed ({x} : set $ prime_spectrum A) ‚Üî
    ((algebra_map A $ x.as_ideal.residue_field).comp f).finite :=
begin
  letI := f.to_algebra,
  haveI : algebra.finite_type K A := hf,
  exact prime_spectrum.is_closed_singleton_iff_finite K x
end

lemma _root_.list.tfae.of_subset {l‚ÇÅ l‚ÇÇ : list Prop} (e : l‚ÇÅ ‚äÜ l‚ÇÇ) (h : tfae l‚ÇÇ) : tfae l‚ÇÅ :=
Œª a ha b hb, h _ (e ha) _ (e hb)

lemma prime_spectrum.is_closed_singleton_tfae_of_finite_type_of_field'
  {K A : Type*} [field K] [comm_ring A] (f : K ‚Üí+* A) (hf : f.finite_type) (x : prime_spectrum A) :
  tfae [x.as_ideal.is_maximal,
    is_closed ({x} : set $ prime_spectrum A),
    stable_under_specialization ({x} : set $ prime_spectrum A),
    ((algebra_map A $ x.as_ideal.residue_field).comp f).finite] :=
begin
  letI := f.to_algebra,
  haveI : algebra.finite_type K A := hf,
  delta ring_hom.finite,
  refine (prime_spectrum.is_closed_singleton_tfae_of_finite_type_of_field K x).of_subset _,
  simp only [list.nil_subset, list.mem_cons_iff, true_or, or_true, list.mem_singleton,
    and_self, list.cons_subset, eq_self_iff_true],
end

lemma prime_spectrum.is_open_singleton_tfae_of_finite_type_of_field'
  {K A : Type*} [field K] [comm_ring A] (f : K ‚Üí+* A) (hf : f.finite_type) (x : prime_spectrum A) :
  tfae [is_open ({x} : set $ prime_spectrum A),
    is_clopen ({x} : set $ prime_spectrum A),
    ((algebra_map A $ localization.at_prime x.as_ideal).comp f).finite,
    is_closed ({x} : set $ prime_spectrum A) ‚àß is_min x] :=
begin
  letI := f.to_algebra,
  haveI : algebra.finite_type K A := hf,
  convert prime_spectrum.is_open_singleton_tfae_of_finite_type_of_field K x using 5,
  rw [‚Üê f.algebra_map_to_algebra, ‚Üê is_scalar_tower.algebra_map_eq],
  dsimp [ring_hom.finite],
  congr,
  exact (algebra.algebra_ext _ _ $ Œª r, rfl),
end

open_locale tensor_product

universes u v w

lemma _root_.subalgebra.map_top {R S T : Type*} [comm_ring R] [comm_ring S] [comm_ring T]
  [algebra R S] [algebra R T] (f : S ‚Üí‚Çê[R] T) : (‚ä§ : subalgebra R S).map f = f.range := 
begin
  ext, simp,
end

instance {R S T : Type*} 
  [comm_ring R] [comm_ring S] [comm_ring T] [algebra R S] [algebra R T]
  [algebra.finite_type R T] : algebra.finite_type S (S ‚äó[R] T) :=
begin
  classical,
  unfreezingI { obtain ‚ü®‚ü®s, hs‚ü©‚ü© := ‚Äπalgebra.finite_type R T‚Ä∫ },
  refine ‚ü®‚ü®s.image algebra.tensor_product.include_right, _‚ü©‚ü©,
  rw [finset.coe_image, ‚Üê @algebra.adjoin_adjoin_of_tower R S (tensor_product R S T),
    algebra.adjoin_image, hs, subalgebra.map_top, eq_top_iff],
  rintro x -,
  induction x using tensor_product.induction_on with x y x y hx hy,
  { exact zero_mem _ },
  { convert_to x ‚Ä¢ ((1 : S) ‚äó‚Çú y) ‚àà _,
    { rw [tensor_product.smul_tmul', ‚Üê algebra.algebra_map_eq_smul_one], refl },
    { exact subalgebra.smul_mem _ (algebra.subset_adjoin ‚ü®y, rfl‚ü©) _ } },
  { exact add_mem hx hy }
end
