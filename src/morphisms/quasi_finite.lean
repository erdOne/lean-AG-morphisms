import morphisms.finite
import algebraic_geometry.finite_kScheme

open category_theory opposite

namespace algebraic_geometry

open_locale topological_space

universe u

variables {X Y : Scheme.{u}} (f : X ‚ü∂ Y) (x : X.carrier)

-- def Scheme.hom.fiber_set (y : Y.carrier) : set X.carrier := 
-- { x | f.1.base x = y }

local notation `f‚Åª¬πf` x:100 := f.fiber (f.1.base x)

@[derive is_iso]
noncomputable
def Scheme.hom.fiber_congr {x y : Y.carrier} (e : x = y) : f.fiber x ‚ü∂ f.fiber y :=
limits.pullback.map _ _ _ _ (ùüô _) (Scheme.Spec.map (Y.residue_field_of_eq e).op) (ùüô _)
  (by rw [category.comp_id, category.id_comp])
  (by rw [category.comp_id, Scheme.residue_field_of_eq_from_Spec])

@[simp, reassoc]
lemma Scheme.hom.fiber_congr_Œπ {x y : Y.carrier} (e : x = y) : 
  f.fiber_congr e ‚â´ f.fiber_Œπ y = f.fiber_Œπ x :=
(limits.pullback.lift_fst _ _ _).trans (category.comp_id _)

noncomputable
def Scheme.hom.as_fiber (x : X.carrier) : (f.fiber (f.1.base x)).carrier :=
(f.fiber_carrier (f.1.base x)).symm ‚ü®x, rfl‚ü©

lemma Scheme.hom.fiber_carrier_as_fiber (x : X.carrier) :
  ‚Üë(f.fiber_carrier (f.1.base x) (f.as_fiber x)) = x := 
subtype.ext_iff.mp ((f.fiber_carrier (f.1.base x)).apply_symm_apply ‚ü®x, rfl‚ü©)

lemma Scheme.hom.as_fiber_fiber_carrier {y : Y.carrier} (x : (f.fiber y).carrier) :
  f.as_fiber (f.fiber_carrier y x) = (f.fiber_congr (f.fiber_carrier y x).prop.symm).1.base x := 
begin
  simp only [Scheme.hom.as_fiber, homeomorph.symm_apply_eq, Scheme.hom.fiber_carrier_apply,
    subtype.coe_mk, subtype.ext_iff, ‚Üê Scheme.comp_val_base_apply, Scheme.hom.fiber_congr_Œπ],
end

def Scheme.hom.quasi_finite_at (x : X.carrier) : Prop :=
ùìù[f.1.base ‚Åª¬π' {f.1.base x} \ {x}] x = ‚ä•

lemma inducing.comap_nhds_within {Œ± Œ≤ : Type*} [topological_space Œ±] [topological_space Œ≤] 
  {f : Œ± ‚Üí Œ≤} (hf : inducing f) (x : Œ±) (s : set Œ≤) :
    filter.comap f (ùìù[s] (f x)) = ùìù[f ‚Åª¬π' s] x :=
by rw [nhds_within, nhds_within, filter.comap_inf, hf.nhds_eq_comap, filter.comap_principal]

lemma embedding.comap_nhds_within_ne {Œ± Œ≤ : Type*} [topological_space Œ±] [topological_space Œ≤] 
  {f : Œ± ‚Üí Œ≤} (hf : embedding f) (x : Œ±) : filter.comap f (ùìù[‚â†] (f x)) = ùìù[‚â†] x :=
begin
  rw [hf.to_inducing.comap_nhds_within, set.preimage_compl],
  congr, ext, exact hf.inj.eq_iff
end

.
lemma Scheme.hom.quasi_finite_at_iff_is_open {x : X.carrier} : 
  f.quasi_finite_at x ‚Üî is_open ({f.as_fiber x} : set (f.fiber $ f.1.base x).carrier) :=
begin
  change ùìù[{ y | f.1.base y = f.1.base x } ‚à© {x}·∂ú] x = ‚ä• ‚Üî _,
  transitivity is_open (f.fiber_carrier (f.1.base x) '' {f.as_fiber x}),
  { rw [set.image_singleton, ‚Üê is_isolated_point_iff, set.inter_comm,
    nhds_within_inter', ‚Üê filter.subtype_coe_map_comap, filter.map_eq_bot_iff,
    ‚Üê embedding_subtype_coe.comap_nhds_within_ne, f.fiber_carrier_as_fiber] },
  { exact (open_embedding.open_iff_image_open $ homeomorph.open_embedding _).symm }
end

lemma Scheme.hom.quasi_finite_at_tfae [locally_of_finite_type f] (x : X.carrier) : 
  tfae [f.quasi_finite_at x,
    is_open ({f.as_fiber x} : set (f.fiber $ f.1.base x).carrier),
    is_clopen ({f.as_fiber x} : set (f.fiber $ f.1.base x).carrier),
    (PresheafedSpace.stalk_map (f.fiber_to_residue_field (f.1.base x)).1 $ f.as_fiber x).finite,
    is_closed ({f.as_fiber x} : set (f.fiber $ f.1.base x).carrier) ‚àß
      stable_under_generalization ({f.as_fiber x} : set (f.fiber $ f.1.base x).carrier)] :=
begin
  rw list.tfae_cons_cons,
  split, { exact f.quasi_finite_at_iff_is_open },
  exact @is_open_singleton_tfae (f.fiber (f.1.base x))
    (local_ring.residue_field (Y.presheaf.stalk $ f.1.base x)) _
    (f.fiber_to_residue_field (f.1.base x))
    (category_theory.limits.pullback.snd.locally_of_finite_type _ _)
    (f.as_fiber x)
end

@[mk_iff]
class locally_quasi_finite extends locally_of_finite_type f : Prop :=
(quasi_finite_at : ‚àÄ x, f.quasi_finite_at x)

lemma locally_quasi_finite_iff_fiber {f : X ‚ü∂ Y} [locally_of_finite_type f] :
  locally_quasi_finite f ‚Üî ‚àÄ y, discrete_topology (f.fiber y).carrier :=
begin
  simp_rw [discrete_topology_iff_forall_is_open_singleton, locally_quasi_finite_iff,
    and_iff_right ‚Äπlocally_of_finite_type f‚Ä∫, f.quasi_finite_at_iff_is_open],
  split,
  { intros H x y,
    have := H (f.fiber_carrier _ y),
    rwa [f.as_fiber_fiber_carrier, ‚Üê set.image_singleton,
      ‚Üê open_embedding.open_iff_image_open] at this,
    exact (Top.homeo_of_iso $
      Scheme.forget_to_Top.map_iso $ as_iso $ f.fiber_congr _).open_embedding },
  { intros H x, apply H }
end

instance locally_quasi_finite.discrete_fiber [locally_quasi_finite f] (y : Y.carrier) :
  discrete_topology (f.fiber y).carrier :=
locally_quasi_finite_iff_fiber.mp ‚Äπlocally_quasi_finite f‚Ä∫ y

noncomputable
def _root_.category_theory.limits.pullback.map_iso {C} [category C] {X Y Z X' Y' Z' : C}
  (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) (f' : X' ‚ü∂ Z') (g' : Y' ‚ü∂ Z') (i‚ÇÅ : X ‚âÖ X')
  (i‚ÇÇ : Y ‚âÖ Y') (i‚ÇÉ : Z ‚âÖ Z') (h‚ÇÅ : f ‚â´ i‚ÇÉ.hom = i‚ÇÅ.hom ‚â´ f')
  (h‚ÇÇ : g ‚â´ i‚ÇÉ.hom = i‚ÇÇ.hom ‚â´ g') [limits.has_pullback f g] [limits.has_pullback f' g'] :
  limits.pullback f g ‚âÖ limits.pullback f' g' :=
{ hom := limits.pullback.map f g f' g' i‚ÇÅ.hom i‚ÇÇ.hom i‚ÇÉ.hom h‚ÇÅ h‚ÇÇ,
  inv := limits.pullback.map f' g' f g i‚ÇÅ.inv i‚ÇÇ.inv i‚ÇÉ.inv
    (by rw [iso.comp_inv_eq, category.assoc, h‚ÇÅ, iso.inv_hom_id_assoc])
    (by rw [iso.comp_inv_eq, category.assoc, h‚ÇÇ, iso.inv_hom_id_assoc]),
  hom_inv_id' := by { ext; simp },
  inv_hom_id' := by { ext; simp } }
.
open _root_.category_theory.limits

noncomputable
def fiber_fst_iso_pullback_fiber {X Y Z : Scheme} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) (x : X.carrier) :
  (limits.pullback.fst : limits.pullback f g ‚ü∂ _).fiber x ‚âÖ
    limits.pullback (g.fiber_to_residue_field (f.1.base x))
      (Scheme.Spec.map $ (f.map_residue_field x).op) :=
begin
  delta Scheme.hom.fiber Scheme.hom.fiber_Œπ,
  refine pullback_symmetry _ _ ‚â™‚â´ pullback_right_pullback_fst_iso _ _ _ ‚â™‚â´
    pullback.congr_hom (f.map_residue_field_from_Spec_residue_field x).symm rfl ‚â™‚â´ 
    (pullback_right_pullback_fst_iso _ _ _).symm ‚â™‚â´ pullback_symmetry _ _ ‚â™‚â´ 
    pullback.map_iso _ _ _ _ (pullback_symmetry _ _) (iso.refl _) (iso.refl _) _ _,
  { simp only [iso.refl_hom, category.comp_id, Scheme.hom.fiber_to_residue_field,
      pullback_symmetry_hom_comp_snd] },
  { simp only [iso.refl_hom, category.comp_id, category.id_comp] },
end

lemma Scheme.hom.quasi_finite_at.comp {X Y Z : Scheme} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z}
  {x : X.carrier} (hf : f.quasi_finite_at x) (hg : g.quasi_finite_at (f.1.base x)) :
  (f ‚â´ g).quasi_finite_at x :=
begin
  delta Scheme.hom.quasi_finite_at at hf hg ‚ä¢,
  rw [eq_bot_iff, ‚Üê hf],
  refine le_inf inf_le_left (le_of_le_of_eq _ sup_bot_eq),
  rw [‚Üê @filter.comap_bot _ _ f.1.base, ‚Üê hg, nhds_within, nhds_within, filter.comap_inf,
    filter.comap_principal, sup_inf_left, filter.sup_principal],
  refine le_inf (inf_le_left.trans (le_trans _ le_sup_right)) (inf_le_right.trans _),
  { rw ‚Üê filter.tendsto_iff_comap, exact f.1.base.2.continuous_at },
  { rw filter.principal_mono, intros y hy,
    by_cases f.1.base y = f.1.base x, exacts [or.inl ‚ü®h, hy.2‚ü©, or.inr ‚ü®hy.1, h‚ü©] }
end

lemma Scheme.hom.quasi_finite_at.of_comp {X Y Z : Scheme} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z}
  {x : X.carrier} (h : (f ‚â´ g).quasi_finite_at x) :
  f.quasi_finite_at x :=
begin
  delta Scheme.hom.quasi_finite_at at h ‚ä¢,
  simp_rw [eq_bot_iff, ‚Üê h, Scheme.comp_val_base, coe_comp],
  exact nhds_within_mono _ (Œª x h, ‚ü®(congr_arg g.1.base h.1 : _), h.2‚ü©),
end

lemma Scheme.hom.quasi_finite_at.iff_comp {X Y Z : Scheme} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z}
  {x : X.carrier} (hg : g.quasi_finite_at (f.1.base x)) :
  (f ‚â´ g).quasi_finite_at x ‚Üî f.quasi_finite_at x :=
‚ü®Scheme.hom.quasi_finite_at.of_comp, Œª h, Scheme.hom.quasi_finite_at.comp h hg‚ü©

lemma locally_quasi_finite_stable_under_composition :
  morphism_property.stable_under_composition @locally_quasi_finite :=
Œª X Y Z f g hf hg, by exactI ‚ü®Œª x, Scheme.hom.quasi_finite_at.comp (hf.2 _) (hg.2 _)‚ü©

lemma locally_quasi_finite_of_comp {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  (hfg : locally_quasi_finite (f ‚â´ g)) : locally_quasi_finite f :=
@@locally_quasi_finite.mk (locally_of_finite_type_of_comp f g)
  (Œª x, Scheme.hom.quasi_finite_at.of_comp (hfg.2 x))

lemma Scheme.hom.quasi_finite_at.of_injective
  (hf : function.injective f.1.base) (x) : f.quasi_finite_at x :=
begin
  rw [Scheme.hom.quasi_finite_at, eq_bot_iff, nhds_within],
  refine inf_le_right.trans_eq (filter.principal_eq_bot_iff.mpr _),
  rw set.eq_empty_iff_forall_not_mem,
  rintro y ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©, exact h‚ÇÇ (hf h‚ÇÅ)
end

lemma locally_quasi_finite_of_mono [mono f] [locally_of_finite_type f] :
  locally_quasi_finite f :=
‚ü®f^.quasi_finite_at.of_injective (injective_of_mono f)‚ü©

lemma locally_quasi_finite_respects_iso : 
  morphism_property.respects_iso @locally_quasi_finite :=
locally_quasi_finite_stable_under_composition.respects_iso
  (Œª X Y e, locally_quasi_finite_of_mono e.hom)

lemma locally_quasi_finite_stable_under_base_change : 
  morphism_property.stable_under_base_change @locally_quasi_finite :=
morphism_property.stable_under_base_change.mk locally_quasi_finite_respects_iso
begin
  introsI X Y S f g H,
  rw locally_quasi_finite_iff_fiber,
  intro y,
  refine @@open_embedding.discrete_topology _ _ _ (Top.homeo_of_iso (Scheme.forget_to_Top.map_iso $
    fiber_fst_iso_pullback_fiber f g y)).open_embedding (show _, from _),
  apply_with discrete_topology_pullback_carrier_of_finite_type { instances := ff },
  { delta Scheme.hom.fiber_to_residue_field, apply_instance },
  { apply_instance }
end

instance locally_quasi_finite_comp {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  [locally_quasi_finite f] [locally_quasi_finite g] : locally_quasi_finite (f ‚â´ g) :=
locally_quasi_finite_stable_under_composition _ _ infer_instance infer_instance

instance {X Y S : Scheme} (f : X ‚ü∂ S) (g : Y ‚ü∂ S) [locally_quasi_finite g] :
  locally_quasi_finite (pullback.fst : pullback f g ‚ü∂ X) :=
locally_quasi_finite_stable_under_base_change (is_pullback.of_has_pullback f g).flip infer_instance

instance {X Y S : Scheme} (f : X ‚ü∂ S) (g : Y ‚ü∂ S) [locally_quasi_finite f] :
  locally_quasi_finite (pullback.snd : pullback f g ‚ü∂ Y) :=
locally_quasi_finite_stable_under_base_change (is_pullback.of_has_pullback f g) infer_instance

local notation `ùñ≤ùóâùñæùñº` K := Scheme.Spec.obj (op $ CommRing.of $ K)

lemma finite_of_quasi_finite {K : Type*} [field K] (f : X ‚ü∂ ùñ≤ùóâùñæùñº K)
  [locally_quasi_finite f] [quasi_compact f] : finite f :=
begin
  rw (finite_tfae_of_finite_type f).out 3 1,
  refine ((f.fiber_carrier (show prime_spectrum K, from ‚ä•)).trans ((homeomorph.set_congr _).trans
    (homeomorph.set.univ X.carrier))).symm.open_embedding.discrete_topology,
  exact set.eq_univ_iff_forall.mpr (Œª x, @subsingleton.elim (prime_spectrum K) _ _ _)
end

lemma quasi_finite_tfae (f : X ‚ü∂ Y) [locally_of_finite_type f] [quasi_compact f] :
  tfae [locally_quasi_finite f,
    ‚àÄ x, _root_.finite (f.fiber x).carrier,
    ‚àÄ x, finite (f.fiber_to_residue_field x),
    ‚àÄ (K : Type u) [field K], by exactI ‚àÄ (g : Scheme.Spec.obj (op $ CommRing.of K) ‚ü∂ Y),
      finite (limits.pullback.snd : limits.pullback f g ‚ü∂ _)] :=
begin
  have := Œª x, @finite_tfae_of_finite_type (f.fiber x) _ _
    (f.fiber_to_residue_field x)
    (category_theory.limits.pullback.snd.locally_of_finite_type _ _)
    (category_theory.limits.pullback.snd.quasi_compact _ _),
  tfae_have : 1 ‚Üí 4, { introsI, exact finite_of_quasi_finite _ },
  tfae_have : 4 ‚Üí 3, { intros H x, apply H },
  tfae_have : 3 ‚Üî 2, { exact forall_congr (Œª x, (this x).out 3 0) },
  tfae_have : 2 ‚Üî 1,
  { exact (forall_congr (Œª x, (this x).out 0 1)).trans locally_quasi_finite_iff_fiber.symm },
  tfae_finish,
end

instance locally_quasi_finite.finite_fiber [locally_quasi_finite f] [quasi_compact f]
  (y : Y.carrier) :
  _root_.finite (f.fiber y).carrier :=
let H := (quasi_finite_tfae f).out 0 1 in H.mp infer_instance y

lemma locally_quasi_finite.set_finite_fiber [locally_quasi_finite f] [quasi_compact f]
  (y : Y.carrier) : { x | f.1.base x = y }.finite :=
begin
  apply_with set.to_finite { instances := ff },
  exact (f.fiber_carrier y).finite_iff.mp (locally_quasi_finite.finite_fiber f y),
end

instance finite.to_locally_quasi_finite [finite f] : locally_quasi_finite f :=
by { rw (quasi_finite_tfae f).out 0 3, intros, apply_instance }

instance is_immersion.to_locally_quasi_finite [is_immersion f] : locally_quasi_finite f :=
locally_quasi_finite_of_mono f

lemma Scheme.hom.quasi_finite_at.of_comp_is_open_immersion {X Y Z : Scheme} {f : X ‚ü∂ Y}
  {g : Y ‚ü∂ Z} [is_open_immersion f] {x : X.carrier} (h : (f ‚â´ g).quasi_finite_at x) : 
  g.quasi_finite_at (f.1.base x) :=
begin
  delta Scheme.hom.quasi_finite_at at h ‚ä¢,
  simp_rw [Scheme.comp_val_base, coe_comp] at h,
  rw [eq_bot_iff, ‚Üê @filter.map_bot _ _ f.1.base, ‚Üê h,
    (is_immersion.base_embedding f).map_nhds_within_eq, ‚Üê nhds_within_inter_of_mem],
  show set.range f.1.base ‚àà nhds_within _ _,
  { apply nhds_within_le_nhds,
    exact is_open.mem_nhds (is_open_immersion.base_open f).2 (set.mem_range_self x) },
  apply nhds_within_mono,
  rintros _ ‚ü®‚ü®y, rfl‚ü©, h‚ÇÅ, h‚ÇÇ‚ü©,
  exact ‚ü®_, ‚ü®h‚ÇÅ, Œª e, h‚ÇÇ (congr_arg f.1.base e)‚ü©, rfl‚ü©,
end

lemma locally_quasi_finite_is_local_at_source : 
  property_is_local_at_source @locally_quasi_finite :=
begin
  refine ‚ü®locally_quasi_finite_respects_iso, _, _‚ü©,
  { introsI, apply_instance },
  { introsI X Y f ùí∞ H,
    refine @@locally_quasi_finite.mk
      (locally_of_finite_type_is_local_at_source.3 f ùí∞ infer_instance) _,
    intro x,
    obtain ‚ü®y, hy‚ü© := ùí∞.covers x,
    exact hy ‚ñ∏ ((H $ ùí∞.f x).2 y).of_comp_is_open_immersion }
end

lemma locally_quasi_finite_is_local_at_target : 
  property_is_local_at_target @locally_quasi_finite :=
begin
  refine ‚ü®locally_quasi_finite_respects_iso, _, _‚ü©,
  { introsI, delta morphism_restrict, apply_instance },
  { introsI X Y f ùí∞ H,
    apply locally_quasi_finite_is_local_at_source.3 f (ùí∞.pullback_cover f),
    intro i,
    rw [Scheme.open_cover.pullback_cover_map, pullback.condition],
    apply_instance }
end

end algebraic_geometry